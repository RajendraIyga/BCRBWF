/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
export declare enum BaseTypesRequired {
    None = 0,
    One = 1,
    OneOrMore = 2,
}
export interface IImportConverter {
    DisplayName: string;
    Extensions: string[];
    NumberOfBaseTypesRequired: BaseTypesRequired;
}
export default class ImportViewModel {
    subscriptions: KnockoutSubscription[];
    dataServiceUrl: string;
    errorMessages: KnockoutObservableArray<any>;
    hidePane: string;
    resources: IDictionary<string>;
    title: KnockoutObservable<string>;
    viewGridId: string;
    uploadId: string;
    openHelp: (product: string, module: string, item: string, data: any) => void;
    showHelp: KnockoutObservable<boolean>;
    toggleHelp: () => void;
    toggleHelpText: KnockoutComputed<string>;
    fileUploaded: KnockoutObservable<boolean>;
    selectedFile: KnockoutObservable<string>;
    onFileTypeSelected: (fileType: any) => void;
    importInProgress: KnockoutObservable<boolean>;
    importNotInProgress: KnockoutComputed<boolean>;
    selectedFileName: KnockoutComputed<string>;
    availableFileTypes: KnockoutObservableArray<IImportConverter>;
    selectedFileTypeValue: KnockoutObservable<string>;
    selectedFileType: KnockoutObservable<IImportConverter>;
    availableBaseTypes: KnockoutObservableArray<IAvailableType>;
    selectedBaseTypes: KnockoutObservableArray<IAvailableType>;
    selectedBaseType: KnockoutObservable<IAvailableType>;
    constructor(params: IPanelEntity);
    dispose(): void;
    getFile: () => File;
    getAvailableTypes: () => void;
    endsWith: (str: any, suffix: any) => boolean;
    onFileUpload: () => void;
    showFileBaseTypeSingle: KnockoutComputed<boolean>;
    canImport: KnockoutComputed<boolean>;
    importData: () => void;
    cancel: () => void;
    reset: () => void;
    clearAndHidePane: () => void;
}
