/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
declare abstract class ParameterBarBase {
    constructor(config: ParameterBarBaseConfig, assignRandomId?: boolean);
    dispose(): void;
    assignRandomId: boolean;
    updateViewParamsSubscription: KnockoutSubscription;
    inEditMode: KnockoutObservable<boolean>;
    loaded: KnockoutObservable<boolean>;
    loadedParameters: KnockoutObservable<boolean>;
    metadata: KnockoutObservable<ITypeMetadata>;
    enableQuerying: KnockoutObservable<boolean>;
    rendered: KnockoutObservable<boolean>;
    renderedChildren: number;
    viewGridId: string;
    viewId: number;
    selectedParameters: KnockoutObservableArray<SelectedParameter>;
    selectedParameterValues: KnockoutObservableArray<SelectedParameterValue>;
    urlParameters: KnockoutObservableArray<UrlParameter>;
    urlFilteredBys: KnockoutObservableArray<UrlFilteredBy>;
    savingEnabled: KnockoutObservable<boolean>;
    parameters: KnockoutObservableArray<SelectedParameter>;
    visibleParameters: KnockoutObservableArray<IParameterViewModel>;
    hiddenParameters: KnockoutObservableArray<IParameterViewModel>;
    loadedAndReady: KnockoutComputed<boolean>;
    abstract postOnRender(): any;
    onRendered(): void;
    apply(): void;
    applyButton(): void;
    cancel(): void;
    edit: () => void;
    refresh: () => void;
    loadParameters(): void;
    modelReadyFunc: (vm: IParameterViewModel) => void;
    generateParameterModelConfig: (parameter: SelectedParameter) => {
        component: string;
        inEditMode: KnockoutObservable<boolean>;
        metadata: any;
        parameter: SelectedParameter;
        viewGridId: string;
        ready: (vm: IParameterViewModel) => void;
        startEditing: () => void;
    };
    generateParameterModelConfigs: KnockoutComputed<{
        component: string;
        inEditMode: KnockoutObservable<boolean>;
        metadata: any;
        parameter: SelectedParameter;
        viewGridId: string;
        ready: (vm: IParameterViewModel) => void;
        startEditing: () => void;
    }[]>;
    updateUrlParameters(urlParams: UrlParameter[]): void;
    updateUrlFilteredBys(urlFilteredBys: UrlFilteredBy[]): void;
    abstract loadParameterValues(): any;
    loadFilteredByValues(): void;
    resetParameters(): void;
    abstract saveSelectedParameterValues(): any;
}
export = ParameterBarBase;
