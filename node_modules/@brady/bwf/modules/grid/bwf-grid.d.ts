/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
declare class GridViewModel implements GridContext {
    constructor(configuration: GridConfiguration);
    dispose(): void;
    aggregates: KnockoutObservableArray<Aggregate>;
    aggregateRowsSelected: KnockoutObservableArray<number>;
    config: GridConfiguration;
    flags: ViewGridFlags;
    footer: OptionalComponent;
    footerVisible: KnockoutObservable<boolean>;
    headerVisible: KnockoutObservable<boolean>;
    header: OptionalComponent;
    inEditMode: KnockoutObservable<boolean>;
    isView: boolean;
    maxRows: number;
    orderedBy: any;
    r: IDictionary<string>;
    subscriptions: KnockoutSubscription[];
    canInsertRows: KnockoutComputed<boolean>;
    canRemoveRows: KnockoutComputed<boolean>;
    embedded: boolean;
    element: string;
    disabled: KnockoutObservable<boolean>;
    disableGridSorting: KnockoutObservable<boolean>;
    disableSoftDelete: boolean;
    disableTextSelectionInGrid: KnockoutObservable<boolean>;
    showValidationInDisplayMode: boolean;
    viewId: KnockoutObservable<number>;
    viewGridId: string;
    viewName: KnockoutObservable<string>;
    canSelectIndividualCells: KnockoutObservable<boolean>;
    postRenderCallback: any;
    columns: KnockoutComputed<GridColumn[]>;
    rows: KnockoutComputed<GridItem[]>;
    recordsCount: KnockoutComputed<number>;
    selectedRows: KnockoutComputed<GridItem[]>;
    userSelectedCells: KnockoutComputed<ISelectedCell[]>;
    updateDirtyRecordWithLatestValues: (item: GridItem, columns: GridColumn[]) => void;
    usingCombinedFooter: KnockoutObservable<boolean>;
    usingCombinedHeader: KnockoutObservable<boolean>;
    activeElement: KnockoutObservable<Element>;
    columnsCount: () => number;
    rowCount: () => number;
    activeGridClass: string;
    copyPasteTextAreaClass: string;
    notInEditMode: KnockoutComputed<boolean>;
    rowComponent: (record: GridItem) => KnockoutObservable<string>;
    showAggregatesAtTop: KnockoutComputed<boolean>;
    showAggregatesAtBottom: KnockoutComputed<boolean>;
    showProcessingOverlay: KnockoutComputed<boolean>;
    originSelectedCell: KnockoutObservable<ISelectedCell>;
    validate: (item: any, success: any, failure: any) => void;
    postRender(): void;
    addEventHooks(): void;
    private addClickDragEventHooks();
    clearCopyPasteBox(): void;
    lastSelectionChangeTime: number;
    selectionThrottle: number;
    selectionChanged(): void;
    copyToClipboardInput(): void;
    isActiveGrid(): boolean;
    aggregateConfig(): GridAggregatesParams;
    insertRecord(insertAbove?: boolean): GridItem;
    insertRecordAtBottom(): GridItem;
    private getRowToSelectAfterRemove();
    removeRecords(opts?: any): void;
    rowConfig(record: GridItem): GridRowParams;
    selectAllRows: () => void;
    selectAllCells: () => void;
    cellClicked(context: any, shiftKey: boolean, ctrlKey: boolean): void;
    private selectRow(context, shiftKey, ctrlKey);
    private selectSingleRow(context, ctrlKey);
    private selectMultipleRow(context, ctrlKey);
    nextCellFrom(columnIndex: number, rowIndex: number): {
        Column: number;
        Row: number;
    };
    previousCellFrom(columnIndex: number, rowIndex: number): {
        Column: number;
        Row: number;
    };
    clearSelected(callback?: () => void): void;
    validationOnSuccess: (row: GridItem, record: any) => void;
    selectCell(column: GridColumn, row: GridItem, selectMultiple?: boolean): void;
    selectCellAt(columnPosition: number, rowPosition: number, selectMultiple?: boolean): void;
    selectCellMultiple(column: GridColumn, row: GridItem): void;
    private selectCellsInRange(startPosX, startPosY, endPosX, endPosY);
    headingClicked(context: any, model: GridColumn): void;
    displaySorting(column: GridColumn): boolean | KnockoutObservable<boolean>;
    sortingIndex(column: GridColumn): KnockoutComputed<number | "">;
    sortingIconClass(column: GridColumn): KnockoutComputed<"fa-caret-down" | "fa-caret-up">;
}
export default GridViewModel;
