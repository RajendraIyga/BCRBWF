/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
/// <reference types="jquery" />
/// <reference types="kendo-ui" />
import explorer = require('modules/bwf-explorer');
export declare class ErrorMessage {
    private heading;
    private body;
    private isVisible;
    showError(heading: string, body: string): void;
    hideError(): void;
}
export interface IQueryStrategy {
    getQueryManager: () => IGridQueryManager;
    queryForExcel: () => string;
}
export declare abstract class ViewGridBase {
    constructor(moduleConfig: IViewGridBaseConfig);
    dispose(): void;
    /*** Properties ***/
    canSelectIndividualCells: KnockoutObservable<boolean>;
    customButtons: KnockoutObservableArray<explorer.ActionButtonViewModel>;
    dataService: KnockoutObservable<string>;
    dataServiceActions: KnockoutObservableArray<explorer.ActionButtonViewModel>;
    protected dataServiceUrl: KnockoutObservable<string>;
    protected errorMessage: ErrorMessage;
    flags: ViewGridFlags;
    gridConfiguration: GridConfiguration;
    help: IHelp;
    private loadViewData;
    metadata: KnockoutObservable<ITypeMetadata>;
    paging: explorer.IPaging;
    protected queryExecutor: KnockoutObservable<IGridQueryManager>;
    records: KnockoutObservableArray<GridItem>;
    recordTypeActions: KnockoutObservableArray<explorer.ActionButtonViewModel>;
    showParameters: KnockoutComputed<boolean>;
    protected subscriptions: KnockoutSubscription[];
    totalCount: KnockoutObservable<number>;
    urlFilteredBy: KnockoutObservableArray<UrlFilteredBy>;
    urlParameters: KnockoutObservableArray<UrlParameter>;
    protected userCanEditViews: KnockoutObservable<boolean>;
    private viewGridDimensions;
    viewGridId: string;
    viewId: KnockoutObservable<number>;
    viewName: KnockoutObservable<string>;
    /*** Computed Properties ***/
    canEditCurrentView: KnockoutComputed<boolean>;
    enableParameters: KnockoutComputed<boolean>;
    overlayMessage: KnockoutComputed<string>;
    overlayVisible: KnockoutComputed<boolean>;
    ready: KnockoutComputed<boolean>;
    recordsCount: KnockoutComputed<number>;
    selectedRecords: KnockoutComputed<GridItem[]>;
    viewGridClass: KnockoutComputed<"bwf-viewGrid-grid-wrapper max-height" | "bwf-viewGrid-grid-wrapper max-height wide-panel">;
    viewGridHeight: KnockoutComputed<string>;
    viewGridWidth: KnockoutComputed<string>;
    /*** Methods ***/
    protected cancelEditMode: () => void;
    private clearSelectedCells();
    private clearSelectedRows();
    clearSelected(): void;
    protected deriveFormat(column: GridColumn): string;
    private goToFirstPage;
    abstract loadView(data: ILoadViewDataBase): any;
    protected resetView(data: ILoadViewDataBase): void;
    refresh: () => JQueryPromise<void>;
    reloadView: (newName: string) => void;
    protected subscribePostbox(topic: string, action: (value) => void): void;
    protected subscribeKnockout(observable: KnockoutObservable<any>, action: (value) => void): void;
    protected setupSubscriptions(moduleConfig: IViewGridBaseConfig): void;
    private showHubDisconnected();
    private showHubError();
    protected showIncorrectQueryUrlParams(): void;
    protected showGridLoadError: (messageText: string) => void;
    private viewGridResized;
}
