/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
export declare abstract class BasePanelEditor {
    loadPanelTimeout: number;
    rendered: KnockoutComputed<boolean>;
    timeoutElapsed: KnockoutObservable<boolean>;
    errorMessages: KnockoutObservableArray<string>;
    inTouchMode: KnockoutComputed<boolean>;
    notInTouchMode: KnockoutComputed<boolean>;
    constructor(entity: IPanelEntity);
    dispose(): void;
    createSubscription(property: IMetadataProperty, c: IPanelEntity): KnockoutSubscription;
    createObservablesForChoice(property: IMetadataProperty, c: IPanelEntity): void;
    listenForChangesTo(property: string, c: IPanelEntity): KnockoutSubscription;
    getComponentNameFromProperty(property: IMetadataProperty): "ds-explorer-cc-hasChoice" | "ds-explorer-cc-numeric" | "ds-explorer-cc-time" | "ds-explorer-cc-date" | "ds-explorer-cc-valueWithUnit" | "ds-explorer-cc-boolean" | "ds-explorer-cc-image" | "ds-explorer-cc-readOnlyCollection" | "ds-explorer-cc-string";
    createObservables(m: ITypeMetadata | IMetadataProperty[], c: IPanelEntity, formDisabled: KnockoutObservable<boolean>, createObservablesForChoice: (property: IMetadataProperty, c: IPanelEntity) => void, callback?: (m: ITypeMetadata | IMetadataProperty[], c: IPanelEntity) => void): void;
    populateObservables(properties: IMetadataProperty[], c: IPanelEntity, record: IHaveId): void;
    setupValidation(properties: IMetadataProperty[], c: IPanelEntity): void;
    getPropertiesFromMetadata(m: ITypeMetadata, isCreate: boolean, doNotFilterHidden?: boolean): IMetadataProperty[];
    isPropertyVisible(p: IMetadataProperty, isCreate: boolean): boolean;
}
