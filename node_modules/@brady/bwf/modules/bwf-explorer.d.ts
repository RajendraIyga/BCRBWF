/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
/// <reference types="jquery" />
/// <reference types="kendo-ui" />
export declare class ExplorerGridColumn implements GridColumn {
    constructor(metadata: IGridColumnMetadata, path: string, position: number);
    displayName: KnockoutObservable<string>;
    metadata: IGridColumnMetadata;
    path: string;
    position: KnockoutObservable<number>;
    hoverTitleContent: string;
    accessor: (gridItem: GridItem) => any;
    displayClasses(): string;
    formatter(v: any): any;
    colSpan: (gridItem: GridItem) => number;
}
export declare class GroupingExplorerGridColumn extends ExplorerGridColumn {
    accessor: (gridItem: GroupingExplorerGridItem) => any;
    colSpan: (gridItem: GroupingExplorerGridItem) => number;
}
export declare abstract class BaseGridItem implements GridItem {
    constructor(record: BaseRecord, columns: GridColumn[], dataService: string, optionalParameters?: ExplorerGridItemOptionalParameters);
    dispose(): void;
    baseTypeName: string;
    bwfId: string;
    columns: GridColumn[];
    dataService: string;
    dirtyRecord: any;
    editable: boolean;
    isChangeTrackingDisabled: boolean;
    gridPosition: number;
    highlight: KnockoutObservable<boolean>;
    highlightTimeout: number;
    id: number | string;
    isNumeric: boolean;
    isValidateOnChangeDisabled: boolean;
    metadata: ITypeMetadata;
    modelValidations: KnockoutObservableArray<any>;
    position: KnockoutObservable<number>;
    queryPosition: KnockoutObservable<number>;
    record: any;
    selected: KnockoutObservable<boolean>;
    typeName: string;
    updateTime: number;
    updateType: KnockoutObservable<string>;
    values: IDictionary<KnockoutObservableValue<any>>;
    isNewRecord: KnockoutComputed<boolean>;
    hasUnsavedChanges: KnockoutComputed<boolean>;
    hasValidationErrors: KnockoutComputed<boolean>;
    applyChangeSetResult(result: ChangeSetResult): void;
    applyLiveChanges(changes: BaseChangedRecord<any>, columns?: GridColumn[]): void;
    abstract applyValidation(validationResult: ModelValidation | IException | MessageSet): any;
    configureChangeTracking(): void;
    configureColumns(columns: GridColumn[]): void;
    createItem(record: BaseRecord): void;
    abstract createRecord(record: BaseRecord): any;
    doHighlight(): void;
    getRowComponent: (GridContext) => KnockoutObservable<string>;
    getSelectedValues: () => IDictionary<KnockoutObservableValue<any>>;
    setupChangeTracking(obs: KnockoutObservableValue<any>, isInitiallyDirty: boolean): void;
    private translateChangeTrackObservable(obs);
    resetValidation(): void;
}
export declare class ExplorerGridItem extends BaseGridItem {
    constructor(record: DataServiceRecord<any>, columns: GridColumn[], dataService: string, optionalParameters?: ExplorerGridItemOptionalParameters);
    createRecord(record: DataServiceRecord<any>): any;
    applyChangeSetResult(result: ChangeSetResult): void;
    applyValidation(validationResult: ModelValidation | IException | MessageSet): void;
}
export declare class GroupingExplorerGridItem extends BaseGridItem {
    constructor(record: FlattenedAggregationRecord, columns: GridColumn[], dataService: string, groupingLevel: number, optionalParameters?: ExplorerGridItemOptionalParameters);
    groupingLevel: number;
    subtotalCell: string;
    totalCell: string;
    totalColSpan: number;
    applyValidation(validationResult: ModelValidation | IException | MessageSet): void;
    createRecord(record: FlattenedAggregationRecord): IGroupingDataItem;
}
export declare abstract class BaseGridQueryManager implements IGridQueryManager {
    constructor(dataService: IMetadataSource, viewGridId: string, autoUpdatesEnabled: KnockoutObservable<boolean>, inEditMode: KnockoutObservable<boolean>, totalCount: KnockoutObservable<number>, query: KnockoutObservable<string>, records: KnockoutObservableArray<GridItem>, columns: KnockoutObservable<GridColumn[]>, querying: KnockoutObservable<boolean>, liveQueryApi: LiveQueryApi, enableQuerying: KnockoutObservable<boolean>);
    dispose(): void;
    autoUpdatesEnabled: KnockoutObservable<boolean>;
    collectedChanges: BaseLiveQueryResultChanges[];
    columns: KnockoutObservable<GridColumn[]>;
    currentQuery: string;
    dataService: IMetadataSource;
    deferred: JQueryDeferred<void>;
    disposed: boolean;
    executor: ILiveQueryExecutor;
    inEditMode: KnockoutObservable<boolean>;
    liveQueryApi: LiveQueryApi;
    querying: KnockoutObservable<boolean>;
    queryingEnabled: KnockoutObservable<boolean>;
    records: KnockoutObservableArray<GridItem>;
    subscriptions: KnockoutSubscription[];
    totalCount: KnockoutObservable<number>;
    viewGridId: string;
    refresh: () => JQueryPromise<void>;
    private createQueryExecutor;
    abstract initialQueryDone(result: BaseQueryResult): any;
    initialQueryFail: (response?: any) => void;
    abstract processLiveChanges(): any;
    updatesQueryDone(result: BaseLiveQueryChangesResult<any>): void;
}
export declare class GridQueryManager extends BaseGridQueryManager {
    constructor(dataService: IMetadataSource, viewGridId: string, aggregates: KnockoutObservableArray<Aggregate>, autoUpdatesEnabled: KnockoutObservable<boolean>, inEditMode: KnockoutObservable<boolean>, totalCount: KnockoutObservable<number>, query: KnockoutObservable<string>, records: KnockoutObservableArray<GridItem>, columns: KnockoutComputed<GridColumn[]>, querying: KnockoutObservable<boolean>, enableQuerying: KnockoutObservable<boolean>);
    aggregates: KnockoutObservableArray<Aggregate>;
    initialQueryDone(result: LiveQueryResult<any>): void;
    private postAggregates(aggregates);
    processLiveChanges(): void;
}
export declare class GroupingGridQueryManager extends BaseGridQueryManager {
    constructor(dataService: IMetadataSource, viewGridId: string, autoUpdatesEnabled: KnockoutObservable<boolean>, inEditMode: KnockoutObservable<boolean>, totalCount: KnockoutObservable<number>, query: KnockoutObservable<string>, records: KnockoutObservableArray<GridItem>, columns: KnockoutComputed<GridColumn[]>, querying: KnockoutObservable<boolean>, currentGroupingLevel: KnockoutObservable<number>, enableQuerying: KnockoutObservable<boolean>);
    currentGroupingLevel: KnockoutObservable<number>;
    initialQueryDone(result: FlattenedAggregationLiveQueryResult): void;
    processLiveChanges(): void;
}
export interface IPaging {
    canGoForward: KnockoutComputed<boolean>;
    canGoBackward: KnockoutComputed<boolean>;
    description: KnockoutComputed<string>;
    hasManyPages: KnockoutComputed<boolean>;
    firstPage: () => void;
    lastPage: () => void;
    nextPage: () => void;
    previousPage: () => void;
    skip: () => number;
    top: () => number;
    reset: () => void;
}
export interface IExplorerGridHeaderConfig {
    applyChanges: () => void;
    cancelEditMode: () => void;
    canApplyChanges: KnockoutComputed<boolean>;
    canDeleteRows: KnockoutComputed<boolean>;
    canInsertRows: KnockoutComputed<boolean>;
    canSelectIndividualCells: KnockoutObservable<boolean>;
    customButtons: KnockoutObservableArray<any>;
    dataServiceActions: KnockoutObservableArray<IDataServiceAction>;
    deleteRow: () => void;
    editModeAvailable: KnockoutObservable<boolean>;
    enterEditMode: () => void;
    inEditMode: KnockoutObservable<boolean>;
    showActionButtons: KnockoutObservable<boolean>;
    insertRow: (insertAbove?: boolean) => void;
    isEnteringEditMode: KnockoutObservable<boolean>;
    title: KnockoutObservable<string>;
    recordsCount: KnockoutComputed<number>;
    recordTypeActions: KnockoutObservableArray<IDataServiceAction>;
    showTitle: KnockoutObservable<boolean>;
    supportsEditMode: KnockoutObservable<boolean>;
    viewGridId: string;
}
export interface IExplorerGridFooterConfig {
    autoUpdatesEnabled: KnockoutObservable<boolean>;
    canEditCurrentView: KnockoutComputed<boolean>;
    canOpenPowerBiPane: KnockoutComputed<boolean>;
    exportToExcel: () => void;
    explorerDataService: KnockoutObservable<IMetadataSource>;
    inEditMode: KnockoutObservable<boolean>;
    isView: boolean;
    orderedBy?: KnockoutObservableArray<string>;
    paging: IPaging;
    exportToExcelEnabled: KnockoutComputed<boolean>;
    disableGridSorting: KnockoutObservable<boolean>;
    viewId: KnockoutObservable<number>;
    viewGridId: string;
}
export declare class ActionButtonViewModel {
    constructor(action: IDataServiceAction | CustomButton, scope: any);
    initialiseFromCustomButton(button: CustomButton): void;
    initialiseFromDataServiceAction(action: IDataServiceAction, scope: any): void;
    actionClick: (data, event) => void;
    displayAsMenu: boolean;
    explorerHostUrl: string;
    id: string;
    isBootstrapGlyphIcon: boolean;
    isCustomIcon: boolean;
    isEmbedded: boolean;
    isFontAwesomeIcon: boolean;
    isVisible: boolean;
    menuItems: any[];
    viewGrid: string;
    isActionLink: KnockoutObservable<boolean>;
    isDisabled: KnockoutObservable<boolean>;
    isHidden: KnockoutObservable<boolean>;
    customButtonIsVisible: KnockoutComputed<boolean>;
    invokableForScriptFunction: any;
    isInvokableFor(): boolean;
    runInvokableForScript(): any;
    enabled: KnockoutComputed<boolean>;
    ActionLink: () => string;
    ActionType: ActionType;
    Parent: any;
    Name: string;
    Position: number;
    DisplayName: string;
    Explanation: string;
    Icon: string;
    IconType: ActionIconType;
    CustomIconUrl: string;
    InvokableFor: InvokableFor;
    InvokableForScript: string;
    Type: string;
    TypeName: string;
    PostboxMessage: string;
    AuditType: string;
    PermissionType: string;
    PermissionName: string;
    ScriptModule: string;
    Url: string;
    ButtonHref: KnockoutComputed<string>;
    auditTrailUrl(): string;
    openViewUrl(): string;
    openDashboardUrl(): string;
    private customButtonClicked(buttonType, value?);
    private openNextGroupingLevel();
    private openEmbeddedView();
    private redirectToUnlock();
    private unlockUser();
    updateUrl(url: string): string;
    redirectToUrl(url: string): void;
    setHashFromUrl(): void;
}
export declare enum ActionIconType {
    FontAwesome = 0,
    BootstrapGlyph = 1,
    Custom = 2,
}
export declare enum ActionType {
    Predefined = 0,
    Javascript = 1,
    Redirect = 2,
    Hash = 3,
    Custom = 999,
}
export declare enum InvokableFor {
    None = 1,
    One = 2,
    Many = 4,
    OneCell = 8,
    ManyCells = 16,
    All = 31,
}
export declare class AggregationRowType {
    static Level: IEnum;
    static Subtotal: IEnum;
    static Total: IEnum;
}
export interface IDataServiceAction extends HeaderButton {
    CustomIconUrl?: string;
    IconType: ActionIconType;
    Name: string;
    Type?: string;
    TypeName: string;
    AuditType?: string;
    IncludeSubTypes?: string[];
    PermissionType?: string;
    PermissionName?: string;
    SubTypeDisplayNames?: string[];
    ScriptModule?: string;
    Url?: string;
}
export declare function readOnlyGridConfiguration(gridId: string, metadata: ITypeMetadata, columns: GridColumn[], records: KnockoutObservableArray<GridItem>, selectIndividualCells: boolean, disabled?: KnockoutObservable<boolean>): GridConfiguration;
export declare class DummyQueryManager {
    constructor(dataServiceHostUrl: string, dataService: string, baseType: string, grid: string, aggregates: KnockoutObservableArray<Aggregate>, autoUpdatesEnabled: KnockoutObservable<boolean>, inEditMode: KnockoutObservable<boolean>, query: KnockoutObservable<string>, records: KnockoutObservableArray<GridItem>, columns: () => GridColumn[], querying: KnockoutObservable<boolean>, enableQuerying?: boolean);
    baseType: string;
    dataService: string;
    columns: () => GridColumn[];
    records: KnockoutObservableArray<GridItem>;
    setData(nakedRecords: any[], derivedTypeName?: string): void;
}
export interface IGeneratedGridConfiguration {
    configuration: GridConfiguration;
    gridItems: KnockoutObservableArray<GridItem>;
    setRecords: (records: any[]) => void;
}
export declare function generateIdentificationSummaryGridConfiguration(gridId: string, metadata: ITypeMetadata, disabled: KnockoutObservable<boolean>): IGeneratedGridConfiguration;
export declare function generateReadOnlyGridConfiguration(properties: string[], displayNames: IDictionary<any>, gridId: string, metadata: ITypeMetadata, disabled: KnockoutObservable<boolean>): IGeneratedGridConfiguration;
export declare class BasicGridColumnMetadata implements IMetadataProperty {
    abbreviatedName: string;
    additionalDescriptions: IKeyValuePair<string, string>[];
    alignment: string;
    defaultFormat: string;
    description: string;
    displayName: string;
    isMandatoryInEditMode: boolean;
    isNotEditableInGrid: boolean;
    isNullable: boolean;
    name: string;
    useCustomDisplayCell: boolean;
    useCustomEditingCell: boolean;
    type: 'link' | 'download' | 'string' | 'type' | 'boolean' | 'measure' | 'integer' | 'numeric' | 'date' | 'time' | 'image' | 'enum';
    hasChoice: boolean;
    dataService: string;
    displayFieldInEditorChoice: string;
    filteredOn: string[];
    valueFieldInEditorChoice: string;
    populateChoiceUrl: string;
    populateChoiceQuery: string;
    isEnum: boolean;
    refreshChoiceOnChangesTo: string;
    isDisabledInEditMode: boolean;
    isDisabledInCreateMode: boolean;
    _clrType: string;
    _isType: boolean;
    copyBehaviour: string;
    customCopyScript: string;
    customControl: string;
    customControlHeight: number;
    isCustomControlHeightAuto: boolean;
    customControlParameter: string;
    customDisplayCell: string;
    customEditingCell: string;
    defaultValue: any;
    editingName: string;
    format: string;
    fullName: string;
    heightInLines: number;
    identityProperties: string[];
    isFreeFormat: boolean;
    isHidden: boolean;
    isHiddenInEditor: boolean;
    isNotEditableInPanel: boolean;
    isNotCreatableInPanel: boolean;
    parameterAllowNullOrEmpty: boolean;
    parameterAvailableOperators: IEnum[];
    parameterDefaultValue: string;
    parameterDisplayProperty: string;
    parameterQuery: string;
    parameterQueryDataService: string;
    positionInEditor: number;
    isSelectorField: boolean;
    useCustomControl: boolean;
    isHiddenInEditMode: boolean;
    isHiddenInCreateMode: boolean;
    _abbreviatedWasEmpty: boolean;
    _isCollection: boolean;
    constructor(type: string, name: string, abbreviatedName?: string, displayName?: string);
}
export declare class BasicRecord<T> implements DataServiceRecord<T> {
    BaseTypeName: string;
    Id: string;
    Position: number;
    TypeName: any;
    Data: T;
    constructor(position: number, data: T);
}
export declare class BasicGridItem<T> extends BaseGridItem {
    constructor(record: BasicRecord<T>, columns: GridColumn[]);
    createRecord(record: BasicRecord<any>): any;
    applyValidation(validationResult: ModelValidation | IException | MessageSet): void;
}
export declare function generateBasicGridItem<T extends IHaveId>(record: T, position: number, columns: GridColumn[]): BasicGridItem<T>;
export declare function generateBasicGridItems<T extends IHaveId>(records: T[], columns: GridColumn[]): BasicGridItem<T>[];
export declare function generateGridConfiguration(items: GridItem[], columns: GridColumn[], metadata: ITypeMetadata, gridId: string, editable: boolean): GridConfiguration;
export declare function generateGridColumnsFromPropertyNames(properties: string[], displayNames: IDictionary<any>, metadata: ITypeMetadata): ExplorerGridColumn[];
export declare function generateBasicGridConfiguration(items: GridItem[], columns: GridColumn[], gridId: string, editable: boolean): GridConfiguration;
