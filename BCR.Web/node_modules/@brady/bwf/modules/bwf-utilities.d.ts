/// <reference types="knockout" />
export declare function clone<T>(toClone: T): T;
export declare function forEach<T>(obj: IDictionary<T>, cb: (item: T, index?: number) => void): void;
export declare module Results {
    function isMessageSet(result: ValidationResult): result is MessageSet;
    function isModelValidation(result: ValidationResult): result is ModelValidation;
    function isException(result: ValidationResult): result is IException;
}
export declare function filterEncode(input: string): string;
/**
 * @description Removes all selections from all locations, where a selection is user highlighted text on the page
 */
export declare function removeAllSelectedRanges(): void;
/**
 * @description Return if anything is selected on page, where a selection is user highlighted text on the page
 * @returns True if there is anything selected on the page
 */
export declare function isAnySelectionOnPage(): boolean;
/**
 * @description Sets the position of the caret in the input element
 * @param element The input element to insert the caret into
 * @param pos The position in which to insert the caret
 */
export declare function setCaretPosition(element: HTMLInputElement, pos: number): void;
export declare function elementsFromPoint(x: any, y: any): Element[];
export declare enum KEY_CODES {
    BACKSPACE = 8,
    TAB = 9,
    ENTER = 13,
    SHIFT = 16,
    CTRL = 17,
    ALT = 18,
    ESCAPE = 27,
    SPACEBAR = 32,
    PAGE_UP = 33,
    PAGE_DOWN = 34,
    END = 35,
    HOME = 36,
    DELETE = 46,
    ARROW_LEFT = 37,
    ARROW_UP = 38,
    ARROW_RIGHT = 39,
    ARROW_DOWN = 40,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
}
export declare module UrlUtilities {
    enum QueryType {
        Parameters = 0,
        FilteredBy = 1,
    }
    function buildUrl(url: string, parameterValues: SelectedParameterValue[], queryType?: QueryType): string;
    function getEncodedValue(type: string, field: string, operator: string, value: string): string;
}
export declare module FullscreenAPI {
    function isAnyElementIsFullScreen(): boolean;
    function requestFullScreen(el: Element): void;
    function exitFullScreen(): void;
    function isFullScreenAvailable(): boolean;
}
export declare function isObservableArray(value: any): boolean;
export declare class LocalStorageWithExpiry implements IndexlessStorage {
    constructor(defaultExpiryInSeconds?: number);
    defaultExpiry: number;
    setItem: (key: string, data: string, expiresOn?: number) => void;
    getItem: (key: string) => any;
    removeItem: (key: string) => void;
    clear: () => void;
    readonly length: number;
}
export declare function isValidImage(value: string): boolean;
export declare function isValidBase64(value: any): boolean;
export declare function generateGuid(): string;
export declare function getRecordFromGrid(bwfId: string): any;
export declare function getRecordsFromGrid(bwfIds: string[]): any[];
export declare function supportsTouch(): boolean;
export declare const isTouchModeEnabled: KnockoutComputed<boolean>;
/**
 * @description Generate a number based on window.performance.now(), good for uniqueness on single pages
 */
export declare function getNextBwfId(): number;
