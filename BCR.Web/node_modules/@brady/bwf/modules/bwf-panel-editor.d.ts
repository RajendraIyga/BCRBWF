/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
/// <reference types="jquery" />
/// <reference types="kendo-ui" />
import basePanelEditor = require('modules/bwf-basePanelEditor');
import 'modules/bwf-knockout-validators';
declare class PanelEditor extends basePanelEditor.BasePanelEditor {
    constructor(entity: IPanelEntity);
    dispose(): void;
    persistentWarningMessages: KnockoutObservableArray<string>;
    grid: string;
    metadata: KnockoutObservable<ITypeMetadata>;
    metadataPromise: JQueryPromise<ITypeMetadata>;
    recordQuery: JQueryXHR;
    typePermissions: KnockoutObservable<ITypePermissions>;
    typePermissionsQuery: JQueryXHR;
    resources: IDictionary<string>;
    subscriptions: KnockoutSubscription[];
    recordLoaded: KnockoutObservable<boolean>;
    hostUrl: string;
    isCreate: KnockoutComputed<boolean>;
    isBeingViewed: KnockoutComputed<boolean>;
    isLockable: KnockoutComputed<boolean>;
    title: KnockoutComputed<string>;
    formDisabled: KnockoutComputed<boolean>;
    saveVisible: KnockoutComputed<boolean>;
    saveDisabled: KnockoutComputed<boolean>;
    current: IPanelEntity;
    properties: KnockoutComputed<IMetadataProperty[]>;
    rendered: KnockoutComputed<boolean>;
    fetchRenderData(entity: IPanelEntity): void;
    updateMetadata(c: IPanelEntity): void;
    updateTypePermissions(c: IPanelEntity): void;
    updateRecordValues(panelItem: IPanelEntity, metadata: ITypeMetadata): void;
    applyCopyBehaviour(record: any, metadata: ITypeMetadata): void;
    setDefaultValues(metadata: ITypeMetadata, record: any): void;
    writeCurrentValuesToRecord(): void;
    close: () => void;
    saveClick(): void;
    save: (current: IPanelEntity, metadata: ITypeMetadata, errorMessages: KnockoutObservableArray<string>, closePanelCallback: () => void) => void;
    clearSubscriptions(): void;
    createSubscriptions(m: ITypeMetadata, c: IPanelEntity): void;
    getComponentName(property: IMetadataProperty): string;
}
export = PanelEditor;
