export declare class QueryBuilder implements IQueryBuilder {
    private type;
    private expandProperties;
    private filters;
    private orderBys;
    private aggregates;
    private groupBys;
    private groupByAggregates;
    private top;
    private skip;
    private distinctBy;
    private includeExpandsForEdit;
    private excludeTotalCount;
    constructor(type: string);
    Expand(...properties: string[]): QueryBuilder;
    IncludeExpandsForEditing(): QueryBuilder;
    ExcludeTotalCount(): QueryBuilder;
    OrderBy(property: string, ascending?: boolean): QueryBuilder;
    DistinctBy(property: string): QueryBuilder;
    Filter(callback: (filterBuilder: FilterBuilder) => void): QueryBuilder;
    Top(maxRecords: number): QueryBuilder;
    Skip(toSkip: number): QueryBuilder;
    GroupBy(property: string): QueryBuilder;
    Aggregate(builder: (aggregateBuilder: IAggregateBuilder) => void): QueryBuilder;
    GroupByAggregate(builder: (aggregateBuilder: IAggregateBuilder) => void): QueryBuilder;
    private buildQuery(urlEncode?);
    GetQuery(): string;
}
export declare class FilterBuilder implements IFilterBuilder {
    filterParts: string[];
    constructor();
    lastWasAnd: boolean;
    lastWasOr: boolean;
    lastWasProperty: boolean;
    resetLast(): void;
    Property(property: string): FilterOperator;
    And(subFilterSetup?: (x: FilterBuilder) => void): this;
    Or(subFilterSetup?: (x: FilterBuilder) => void): this;
    Parenthesis(subFilterSetup: (x: FilterBuilder) => this): this;
    getFilter(): string;
}
export declare class FilterOperator implements IFilterOperator {
    filterBuilder: FilterBuilder;
    property: string;
    constructor(fb: FilterBuilder, property: string);
    private getFilterParameterString(item, allowNulls?);
    private getFilterParameterStringDate(item, allowNulls?);
    private getFilterParameterStringDateTime(item, allowNulls?);
    Like(item: string): FilterBuilder;
    NotLike(item: string): FilterBuilder;
    GreaterThan(item: any): FilterBuilder;
    GreaterThanDate(item: any): FilterBuilder;
    GreaterThanDateTime(item: any): FilterBuilder;
    GreaterThanEqualTo(item: any): FilterBuilder;
    GreaterThanEqualToDate(item: any): FilterBuilder;
    GreaterThanEqualToDateTime(item: any): FilterBuilder;
    LessThan(item: any): FilterBuilder;
    LessThanDate(item: any): FilterBuilder;
    LessThanDateTime(item: any): FilterBuilder;
    LessThanEqualTo(item: any): FilterBuilder;
    LessThanEqualToDate(item: any): FilterBuilder;
    LessThanEqualToDateTime(item: any): FilterBuilder;
    EqualTo(item: any): FilterBuilder;
    EqualToDate(item: any): FilterBuilder;
    EqualToDateTime(item: any): FilterBuilder;
    NotEqualTo(item: any): FilterBuilder;
    NotEqualToDate(item: any): FilterBuilder;
    NotEqualToDateTime(item: any): FilterBuilder;
    IsNull(): FilterBuilder;
    IsNotNull(): FilterBuilder;
    In(...items: any[]): FilterBuilder;
}
