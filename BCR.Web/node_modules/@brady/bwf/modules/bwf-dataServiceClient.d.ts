/// <reference types="jquery" />
/// <reference types="kendo-ui" />
declare class DataServiceClient implements IDataServiceClient {
    token: string;
    defaultDataService: string;
    liveQueryExecutors: {
        [queryId: string]: ILiveQueryExecutor;
    };
    liveQueryPollingIntervalMilliseconds: number;
    recordLockTypeString: string;
    constructor(defaultDataService?: string);
    private getDataService(dataServiceName);
    startLiveQuery(query: string, changesCallback: (changes, replaceAll: boolean) => void, dataService?: string): JQueryPromise<ILiveQueryInitialResponse>;
    killLiveQuery(queryId: string): void;
    dispose(): void;
    create<T>(item: T, type: string, dataService?: string, requeryCreated?: boolean): JQueryPromise<ChangeResultWithItem<T>>;
    update<T>(item: T, type: string, dataService?: string, requeryUpdated?: boolean): JQueryPromise<ChangeResultWithItem<T>>;
    delete(id: any, type: string, dataService?: string): JQueryPromise<void>;
    processChangeSet(changeSet: IChangeSet, type: string, dataService?: string): JQueryPromise<ChangeSetResult>;
    get<T>(id: any, type: string, dataService?: string): JQueryPromise<T>;
    query<T>(query: string, dataService?: string): JQueryPromise<QueryResult<T>>;
    getMetadataForType(type: string, dataService?: string): JQueryPromise<ITypeMetadata>;
    lock(id: any, context: string, reason: string, itemType: string): JQueryPromise<void>;
    private getUnlockQueryString(id, itemType, context);
    unlock(id: any, itemType: string, context: string): JQueryPromise<void>;
    getTypesForDataService(dataServiceName: string): JQueryPromise<IAvailableType[]>;
}
export = DataServiceClient;
