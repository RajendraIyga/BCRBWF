/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
/// <reference types="jquery" />
/// <reference types="kendo-ui" />
import explorer = require('modules/bwf-explorer');
import vgBase = require('modules/grid/bwf-viewGrid-base');
declare class ViewGrid extends vgBase.ViewGridBase {
    constructor(moduleConfig: IViewGridData);
    addedColumnsForEditMode: KnockoutObservableArray<GridColumn>;
    aggregates: KnockoutObservableArray<Aggregate>;
    aggregatesAtTop: boolean;
    aggregatesAtBottom: boolean;
    aggregatesPosition: KnockoutObservable<string>;
    aggregationFunctions: KnockoutObservableArray<IAggregationFunctionDefinition>;
    baseType: KnockoutObservable<string>;
    breadcrumbConfiguration: IBreadcrumbConfig;
    currentGroupingLevel: KnockoutObservable<number>;
    customiseColumnHeaders: (columns: GridColumn[]) => void;
    disableGridSorting: KnockoutObservable<boolean>;
    explorerDataService: KnockoutObservable<IMetadataSource>;
    gridPresentation: KnockoutObservable<GridPresentation>;
    grouping: KnockoutObservable<Grouping>;
    groupingAggregations: KnockoutObservableArray<GroupingAggregation>;
    includeGroupingTotals: KnockoutObservable<any>;
    includeGroupingSubtotals: KnockoutObservableArray<string>;
    inGroupingMode: KnockoutObservable<boolean>;
    initialiseNewRecord: (r: any) => void;
    invalidColumnsOrderByMessages: KnockoutObservableArray<string>;
    isEnteringEditMode: KnockoutObservable<boolean>;
    groupedByFilter: KnockoutObservableArray<IGroupingDataItem>;
    queryStrategy: KnockoutComputed<vgBase.IQueryStrategy>;
    private recordTypeActionsResult;
    private _selectedColumns;
    selectedOrderBys: KnockoutObservableArray<string>;
    selectedParameters: KnockoutObservableArray<SelectedParameter>;
    selectedParameterValues: KnockoutObservableArray<SelectedParameterValue>;
    selectionFilter: KnockoutObservable<string>;
    selectedAggregations: KnockoutObservableArray<SelectedAggregation>;
    urlAggregates: KnockoutObservableArray<UrlAggregate>;
    validationsInProgress: IDictionary<JQueryXHR>;
    aggregatesQueryFragment: KnockoutComputed<string>;
    aggregationsQueryFragment: KnockoutComputed<string>;
    private getAggregationQueryString(aggregation);
    private getAggregationIdString(aggregation);
    expandsQueryFragment: KnockoutComputed<string>;
    exportToExcelEnabled: KnockoutComputed<boolean>;
    isAtMaxGroupingLevel: KnockoutComputed<boolean>;
    buildQuery: KnockoutComputed<{
        baseType: string;
        combinedFilter: string;
        expands: string;
        orderBy: string;
        aggregates: string;
    }>;
    buildGroupingQuery: KnockoutComputed<{
        baseType: string;
        dataFilter: string;
        groupBy: string;
        aggregations: string;
        includeSubtotals: string;
        includeTotals: any;
    }>;
    orderByQueryFragment: KnockoutComputed<string>;
    groupingFilter: KnockoutComputed<string>;
    parameterFilter: KnockoutComputed<string>;
    canApplyChanges: KnockoutComputed<boolean>;
    hasAnyValidationErrors: KnockoutComputed<boolean>;
    canEnterEditMode: KnockoutComputed<boolean>;
    canInsertRows: KnockoutComputed<boolean>;
    canDeleteRows: KnockoutComputed<boolean>;
    canOpenPowerBiPane: KnockoutComputed<boolean>;
    editModeAvailable: KnockoutComputed<boolean>;
    enableParameters: KnockoutComputed<boolean>;
    showParameters: KnockoutComputed<boolean>;
    selectedColumns: KnockoutComputed<GridColumn[]>;
    missingPropertyColumns: KnockoutComputed<explorer.ExplorerGridColumn[]>;
    updateDirtyRecordWithLatestValues(item: GridItem, columns: GridColumn[]): void;
    applyChanges: () => void;
    private applyChangesRequest;
    processApplyChangesResponse(response: ChangeSetResult): void;
    createNewRecord: () => explorer.ExplorerGridItem;
    enterEditMode: () => void;
    exitEditMode: () => void;
    exportToExcel: () => any;
    validateRecord: (record: GridItem, success: (record: GridItem, response: IHaveId) => void, failure: (record: GridItem, validation: ModelValidation) => void) => void;
    loadView(data: ILoadViewData): void;
    private loadedView(view, ds, enableQuerying?);
    private loadedUniverse(view, dataServicesResult, dataServiceActionsResult, recordTypeActionsResult, metadata, aggregationFunctions, enableQuerying?);
    private updateGroupingLevels(groupingProperties);
    private getGroupingActions();
    private getOrderBys(orderByString);
    private getGroupingOrderBys(grouping);
    private getColumns(gridPresentation);
    private getGroupingSubtotals(grouping);
    private getGroupingColumns(grouping, presentation);
    private getGroupingAggregations(grouping);
    parameterBarConfiguration(): ParameterBarConfig;
    protected setupSubscriptions(moduleConfig: IViewGridBaseConfig): void;
    private refreshView();
    private refreshGridPresentation();
    private refreshGrouping();
    private refreshSelection();
    private nextGroupingLevel;
    private resetGroupingLevel;
    private setGroupingLevel;
    private setGroupingBreadcrumbs;
}
export = ViewGrid;
