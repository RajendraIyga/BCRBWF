/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
export declare abstract class BwfCell<T> implements IGridCell {
    constructor(params: GridCellParams, isEditable?: boolean);
    dispose(): void;
    callback: (position: number) => void;
    onRendered(): void;
    row: GridItem;
    column: GridColumn;
    colSpan: number;
    customClasses: string;
    gridId: string;
    gridDisabled: KnockoutObservable<boolean>;
    isChangeTrackingDisabled: boolean;
    value: KnockoutObservableValue<T>;
    typeMetadata: ITypeMetadata;
    cssClasses: KnockoutComputed<string>;
    attributes: KnockoutComputed<any>;
    updateCellValue: KnockoutSubscription;
    updateRowPosition: KnockoutSubscription;
    isEditable: KnockoutObservable<boolean>;
    private isEditableCell;
    isEditMode: boolean;
    isFocused: KnockoutComputed<boolean>;
    isSelected: KnockoutObservable<boolean>;
    isInCopyOrPasteGroup: KnockoutObservable<boolean>;
    isDirty: KnockoutComputed<boolean>;
    isValid: KnockoutObservable<boolean>;
    validationSubscription: KnockoutSubscription;
    private highlight;
    private highlightId;
    subscribeToValue(gridId: string, rowPos: number, colPos: number): KnockoutSubscription;
    doHighlight(): void;
    getClipboardValue(): string;
    pasteValue: (value: string) => void;
}
export declare abstract class BwfWrapperCell<T> extends BwfCell<T> {
    constructor(params: GridCellParams, isEditable?: boolean);
    dispose(): void;
    value: KnockoutComputedValue<T>;
    recordValue: KnockoutObservableValue<T>;
}
export declare abstract class BwfWrapperCell2<T, U> extends BwfWrapperCell<any> {
    constructor(params: GridCellParams, isEditable?: boolean);
    writeValue: (U) => void;
    value: KnockoutComputedValue<U>;
    recordValue: KnockoutObservableValue<T>;
}
