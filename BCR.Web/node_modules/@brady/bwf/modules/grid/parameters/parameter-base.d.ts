/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
export declare class ParameterControlType {
    value: string;
    constructor(value: string);
    toString(): string;
    static kendoMultiSelect: ParameterControlType;
    static kendoDropDownList: ParameterControlType;
}
export declare abstract class ParameterViewModelBase implements IParameterViewModel {
    constructor(params: IParameterViewModelParams);
    dispose(): void;
    controlId: string;
    dateTimePatterns: string[];
    datePatterns: string[];
    field: string;
    id: number;
    includeEmpty: KnockoutObservable<boolean>;
    inEditMode: KnockoutObservable<boolean>;
    isLike: boolean;
    isSingle: boolean;
    metadata: IMetadataProperty;
    newItemText: string;
    newItemValue: string;
    operator: string;
    title: string;
    type: string;
    startEditing: () => void;
    subscriptions: KnockoutSubscription[];
    viewGridId: string;
    allowNullOrEmpty: boolean;
    includeEmptyText: string;
    previousEmpty: boolean;
    previousValues: KnockoutObservableArray<string>;
    values: KnockoutObservableArray<ParameterValue>;
    selectedValues: KnockoutObservableArray<string>;
    addValue(value: string): void;
    loadValuesFromUrl(parameters: UrlParameter[]): void;
    resetToPrevious(): void;
    savePreviousValues(): void;
    toggleIncludeEmpty(): void;
}
export declare abstract class ParameterViewModel extends ParameterViewModelBase {
    constructor(params: IParameterViewModelParams, controlType: ParameterControlType);
    controlType: ParameterControlType;
    getControl(): IParameterControl;
    postRender: () => void;
    focus(): boolean;
    dispose(): void;
    populateValues(): void;
    parseValueIntoOption(text: string): {
        text: string;
        value: string;
        used: boolean;
    };
    setupEventHandler(): void;
}
export declare class HiddenParameterViewModel extends ParameterViewModelBase {
}
