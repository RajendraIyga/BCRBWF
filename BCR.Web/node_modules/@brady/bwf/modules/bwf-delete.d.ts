/// <reference types="knockout" />
/// <reference types="knockout.postbox" />
export declare class DeletionSummary implements IRecordWithSummary {
    record: any;
    identificationSummary: string;
    isLocked: KnockoutObservable<boolean>;
    isPendingLockCheck: KnockoutObservable<boolean>;
}
declare class DeleteViewModel {
    data: IPanelEntity;
    baseType: string;
    dataService: string;
    deleteConfirmation: KnockoutComputed<string>;
    deletedRecords: any[];
    entities: KnockoutObservableArray<DeletionSummary>;
    errorMessages: KnockoutObservableArray<string>;
    hasIgnoreLockPermission: KnockoutObservable<boolean>;
    grid: string;
    lockedPlural: string;
    lockChecking: string;
    lockDeletionWarning: string;
    onCompletion: (params: IOnCompletionParams) => void;
    parentIsSource: boolean;
    resources: IDictionary<string>;
    state: IPanelState;
    metadata: ITypeMetadata;
    title: KnockoutObservable<string>;
    deleting: KnockoutObservable<boolean>;
    subscriptions: KnockoutSubscription[];
    gridConfiguration: GridConfiguration;
    checkRecordLocksCompleted: KnockoutObservable<boolean>;
    gridVisible: KnockoutObservable<boolean>;
    typeLoaded: KnockoutObservable<boolean>;
    anyLocked: KnockoutComputed<boolean>;
    checkingLockStatus: KnockoutComputed<boolean>;
    disableSave: KnockoutComputed<boolean>;
    displayName: KnockoutComputed<string>;
    constructor(panelEntity: IPanelEntity);
    checkLockStatus(item: DeletionSummary, ds: IMetadataSource): void;
    confirmDelete(): void;
    successfulDelete(): void;
    cancel(): void;
    dispose(): void;
    isObject(val: any): boolean;
    configureGrid(metadata: ITypeMetadata): void;
    deletedObjects: KnockoutObservable<DeletionSummary[]>;
    ready: KnockoutObservable<boolean>;
    canDelete: KnockoutComputed<boolean>;
    removeSelected: () => void;
}
export default DeleteViewModel;
